package pl.delor.graphprocessing;
import java.util.Dictionary;
import java.util.Hashtable;
import java.awt.image.BufferedImage;
import static pl.delor.graphprocessing.GP.getBlue;
import static pl.delor.graphprocessing.GP.getGreen;
import static pl.delor.graphprocessing.GP.getRed;
import static pl.delor.graphprocessing.GP.toRGB;
import java.awt.Component;
import javax.swing.JLabel;
/**
 *
 * @author delor
 */
public class JPreviewPanelBrightness extends JPreviewPanel {

    /**
     * Creates new form JPreviewPanelBrightness
     */
    public JPreviewPanelBrightness() {
        initComponents();
        
        Dictionary<Integer, Component> labelTable = new Hashtable<Integer, Component>();

        labelTable.put(-255, new JLabel("Min"));
        labelTable.put(-200, new JLabel("-200"));
        labelTable.put(-100, new JLabel("-100"));
        labelTable.put(0, new JLabel("0"));
        labelTable.put(100, new JLabel("100"));
        labelTable.put(200, new JLabel("200"));
        labelTable.put(255, new JLabel("Max"));

        jSliderBrightness.setLabelTable(labelTable);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSliderBrightness = new javax.swing.JSlider();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jSliderBrightness.setMajorTickSpacing(255);
        jSliderBrightness.setMaximum(255);
        jSliderBrightness.setMinimum(-255);
        jSliderBrightness.setMinorTickSpacing(15);
        jSliderBrightness.setPaintLabels(true);
        jSliderBrightness.setPaintTicks(true);
        jSliderBrightness.setValue(0);
        jSliderBrightness.setRequestFocusEnabled(false);
        jSliderBrightness.setValueIsAdjusting(true);
        jSliderBrightness.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSliderBrightnessStateChanged(evt);
            }
        });
        add(jSliderBrightness);
    }// </editor-fold>//GEN-END:initComponents

    private void jSliderBrightnessStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderBrightnessStateChanged
        super.processImage();
    }//GEN-LAST:event_jSliderBrightnessStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSlider jSliderBrightness;
    // End of variables declaration//GEN-END:variables

    @Override
    protected String title() {
        return "Changing brightness";
    }

    @Override
    protected BufferedImage doProcessImage(BufferedImage input, BufferedImage output) {
        int brightness = jSliderBrightness.getValue();
        for (int y = 0; y < input.getHeight(); y++) {
            for (int x = 0; x < input.getWidth(); x++) {
                int pixel = input.getRGB(x, y);

                int r = getRed(pixel) + brightness;
                int g = getGreen(pixel) + brightness;
                int b = getBlue(pixel) + brightness;

                output.setRGB(x, y, toRGB(r, g, b));
            }
        }
        return output;
    }

}
